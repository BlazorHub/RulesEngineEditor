@using RulesEngineEditor.Models
@inject RulesEngineEditor.Services.WorkflowService WorkflowService

@if (Input != null)
{
    <sp_grid_kvp>
        <div>Input Name</div>
    </sp_grid_kvp>
    <EditForm EditContext="@EditContext">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <sp_grid_workflow>
            <div>
                <InputText title="Name" class="form-control" @bind-Value="@Input.InputRule" />
            </div>
        </sp_grid_workflow>
        <h5>Parameters</h5>
        <button class="reeditor_button" title="Add Input Parameter" @onclick="(() => Input.Parameter.Insert(0, new InputParam()))">Add</button>
        <sp_grid_kvp>
            <div>Input Param Name</div>
            <div>Value</div>
        </sp_grid_kvp>
    </EditForm>
    <Dropzone Items="Input.Parameter">
        <InputParamEditor InputParam="@context" InputParamDelete="DeleteInputParam" />
    </Dropzone>
}
@code {
    [Parameter]
    public InputRuleParameter Input { get; set; }

    [Parameter]
    public EventCallback<InputRuleParameter> InputDeleted { get; set; }

    private EditContext EditContext;

    protected override void OnInitialized()
    {
        EditContext = new EditContext(Input);
        EditContext.OnFieldChanged += EditContext_OnFieldChanged;

        base.OnInitialized();
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
    }

    // Note: The OnFieldChanged event is raised for each field in the model
    private void EditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        WorkflowService.InputUpdate();
    }

    private void DeleteInputParam(InputParam inputParameter)
    {
        Input.Parameter.Remove(inputParameter);
        WorkflowService.WorkflowUpdate();
    }
}
